package PackageDemo2;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapred.*;

import java.io.IOException;
import java.util.Iterator;

public class UserLog {

    
    public static class UserLogMapper extends MapReduceBase implements Mapper<LongWritable, Text, Text, IntWritable> {
        private final static IntWritable one = new IntWritable(1);

        public void map(LongWritable key, Text value, OutputCollector<Text, IntWritable> output, Reporter reporter)
                throws IOException {
        	
        	String valueString = value.toString();
            String[] SingleUserData = valueString.split("-");
            output.collect(new Text(SingleUserData[0]), one);
        }
    }
    public static class UserLogReducer extends MapReduceBase implements Reducer<Text, IntWritable, Text, IntWritable> {
        public void reduce(Text t_key, Iterator<IntWritable> values, OutputCollector<Text, IntWritable> output,
                           Reporter reporter) throws IOException {
            Text key = t_key;
            int frequencyForUser = 0;
            while (values.hasNext()) {
            	 IntWritable value = values.next();
                 frequencyForUser += value.get();
             }
             output.collect(key, new IntWritable(frequencyForUser));
         }
     }
    public static void main(String[] args) {
        JobClient my_client = new JobClient();
        JobConf job_conf = new JobConf(UserLog.class);
        
        // Set Job Name
        job_conf.setJobName("MaxLoggedUsers");
        
        // Set Output Key and Value Data Types
        job_conf.setOutputKeyClass(Text.class);
        job_conf.setOutputValueClass(IntWritable.class);
        job_conf.setMapperClass(UserLogMapper.class);
        job_conf.setReducerClass(UserLogReducer.class);
        
        // Set Input and Output Format
        job_conf.setInputFormat(TextInputFormat.class);
        job_conf.setOutputFormat(TextOutputFormat.class);
        
        // Set Input and Output Paths
        FileInputFormat.setInputPaths(job_conf, new Path(args[0]));
        FileOutputFormat.setOutputPath(job_conf, new Path(args[1]));
        
        my_client.setConf(job_conf);
        try {
            // Run the Job
            JobClient.runJob(job_conf);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
          